// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luschnat-ziegler/toDoListAPI/core/ports (interfaces: ToDoListRepository)

// Package ports is a generated GoMock package.
package ports

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/luschnat-ziegler/toDoListAPI/core/domain"
	errs "github.com/luschnat-ziegler/toDoListAPI/errs"
	reflect "reflect"
)

// MockToDoListRepository is a mock of ToDoListRepository interface
type MockToDoListRepository struct {
	ctrl     *gomock.Controller
	recorder *MockToDoListRepositoryMockRecorder
}

// MockToDoListRepositoryMockRecorder is the mock recorder for MockToDoListRepository
type MockToDoListRepositoryMockRecorder struct {
	mock *MockToDoListRepository
}

// NewMockToDoListRepository creates a new mock instance
func NewMockToDoListRepository(ctrl *gomock.Controller) *MockToDoListRepository {
	mock := &MockToDoListRepository{ctrl: ctrl}
	mock.recorder = &MockToDoListRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockToDoListRepository) EXPECT() *MockToDoListRepositoryMockRecorder {
	return m.recorder
}

// DeleteOneById mocks base method
func (m *MockToDoListRepository) DeleteOneById(arg0 string) *errs.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneById", arg0)
	ret0, _ := ret[0].(*errs.AppError)
	return ret0
}

// DeleteOneById indicates an expected call of DeleteOneById
func (mr *MockToDoListRepositoryMockRecorder) DeleteOneById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneById", reflect.TypeOf((*MockToDoListRepository)(nil).DeleteOneById), arg0)
}

// GetAll mocks base method
func (m *MockToDoListRepository) GetAll() (*[]domain.ToDoList, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(*[]domain.ToDoList)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockToDoListRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockToDoListRepository)(nil).GetAll))
}

// GetOneById mocks base method
func (m *MockToDoListRepository) GetOneById(arg0 string) (*domain.ToDoList, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneById", arg0)
	ret0, _ := ret[0].(*domain.ToDoList)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetOneById indicates an expected call of GetOneById
func (mr *MockToDoListRepositoryMockRecorder) GetOneById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneById", reflect.TypeOf((*MockToDoListRepository)(nil).GetOneById), arg0)
}

// Save mocks base method
func (m *MockToDoListRepository) Save(arg0 domain.ToDoList) (*domain.ToDoList, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*domain.ToDoList)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockToDoListRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockToDoListRepository)(nil).Save), arg0)
}

// UpdateOneById mocks base method
func (m *MockToDoListRepository) UpdateOneById(arg0 string, arg1 domain.ToDoList) (*domain.ToDoList, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneById", arg0, arg1)
	ret0, _ := ret[0].(*domain.ToDoList)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// UpdateOneById indicates an expected call of UpdateOneById
func (mr *MockToDoListRepositoryMockRecorder) UpdateOneById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneById", reflect.TypeOf((*MockToDoListRepository)(nil).UpdateOneById), arg0, arg1)
}
